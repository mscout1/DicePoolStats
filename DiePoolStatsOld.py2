#!/usr/bin/env python2
# noinspection
"""
This is a huge monte carlo simulation I wrote for fun in 2009. It simulates
a pool of D10s being rolled and evaluated acording to a modified version
of White Wolf's Old "World Of Darkness" rules.

It reports the results of getting 'S' successes, of getting at least S successes,
and of botching, given an Dice Pool of size 'p' and a Difficulty of 'd' for a
range of Ds and Ps .

Since this was a personal hobby project, the code is prettty crude and the variable names
are a bit arbitrary. I included it because it is an example of performance aware code.
(My first version ran out of memory and crashed. This version crunches as it goes instead of
  trying to generate all data, then evaluate.) Running this for 1 billion trials took a couple
of days, spread over 2 computers.
"""

from __future__ import division
import random
import sys
import itertools


BOTCH = -1
FAIL = 0
Success_Cap = 15


def eval_roll(dice, diff):
    ones = 0
    above = 0
    below = 0
    for d in dice:
        if d == 1:
            ones += 1
        if d >= diff:
            above += 1
        if d < diff:
            below += 1
    if ones > 0 and above < 1:
        return BOTCH
    success = above - ones
    return (success if success > 0 else FAIL)


def roll(pool):
    return [random.randint(1, 10) for d in xrange(pool)]

#def reroll10s(dice):
#    tens = dice.count(10)
#    if (tens):
#        dice.extend([d for d in roll(tens) if d > 1])

def eval_all(rollTest):
    return [eval_roll(rollTest, diff) for diff in xrange(3, 10)]


def testPool(pool, n):
    return ( eval_all(roll(pool)) for x in xrange(n) ) #returns iterator


def crunch(flippedPoolDiff):
    cpns_dif = [[0] * (Success_Cap + 2) for i in xrange(7)]
    sumarr = [0] * 7
    n = 0.0
    for evaledpool in flippedPoolDiff:
        n += 1
        for i in range(7):
            sumarr[i] += max(evaledpool[i], 0)
            cpns_dif[i][evaledpool[i] + 1] += 1
    factor = 100.0 / n
    cpns_dif = [[x * factor for x in cpns] for cpns in cpns_dif]
    ave_arr = [sum / n for sum in sumarr]
    return itertools.izip(xrange(3, 10), ave_arr, cpns_dif)


def reverseCumulativeSum(seq):
    cumlist = [None] * len(seq)
    accumulate = 0
    for i in xrange(len(seq) - 1, -1, -1):
        accumulate += seq[i]
        cumlist[i] = accumulate
    return cumlist


def print_pool_dif(pool_dif, p):
    dif, average, cpns = pool_dif
    botch = cpns[0]
    fail = cpns[0] + cpns[1]
    cumulative_chance = reverseCumulativeSum(cpns[2:p + 2])
    print "Pool : %d    Difficulty : %d" % (p, dif)
    print "successes  :" + (''.join([str(i).rjust(8) for i in xrange(1, p + 1)]))
    print "chance    %:" + (''.join([("%02.2F" % x).rjust(8) for x in cpns[2:p + 2]]))
    print "cum chance%:" + (''.join([("%02.2F" % x).rjust(8) for x in cumulative_chance]))
    print (   "Fail: " + ("%02.2F" % fail).rjust(5) +
              "\tBotch: " + ("%02.2F" % botch).rjust(5) +
              "\tavg: " + ("%02.2F" % average).rjust(5))
    print '\n'


def print_pool(pool, p):
    for pool_dif in pool:
        print_pool_dif(pool_dif, p)
        sys.stdout.flush()


def print_all(lowpool, highpool, n):
    for p in range(lowpool, highpool + 1):
        pool = crunch(testPool(p, n))
        print_pool(pool, p)
        print "++++++++++++++++++++++++++++++++++++++++"

#print_all(1, 15, 1000000000)
print_all(1, 15, 1000000)


